// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String
  password  String
  role      Role      @default(CLIENT)
  avatar    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
  Order     Order[]
}

enum Role {
  ADMIN
  CLIENT
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String
  product     Product[]
}

model Product {
  id          String         @id @default(uuid())
  name        String
  price       Float
  description String?
  categoryId  String
  createdAt   DateTime       @default(now())
  category    Category       @relation(fields: [categoryId], references: [id])
  active      Boolean
  userId      String
  images      ProductImage[]
  OrderItems  OrderItems[]
  user        User           @relation(fields: [userId], references: [id])
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  publicId  String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model OrderItems {
  id         String  @id @default(uuid())
  productId  String
  subtotal   Float
  unitiPrice Float
  quantity   Int
  orderId    String
  product    Product @relation(fields: [productId], references: [id])
  order      Order   @relation(fields: [orderId], references: [id])
}

enum Status {
  CANCELED
  SHIPPED
}

model Order {
  id           String       @id @default(uuid())
  userId       String
  totalAmonut  Float
  status       Status
  createdAt    DateTime     @default(now())
  user         User         @relation(fields: [userId], references: [id])
  orderItemsId String?
  OrderItems   OrderItems[]
}
